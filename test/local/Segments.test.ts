import { expect } from 'chai'
import { BlockInterval, FillStateParams, LimitSwapExactInput, MarketSwapExactInput, RequireBitNotUsed, RequireBitUsed, RequireBlockMined, RequireBlockNotMined, RequireUint256LowerBound, Swap01, Token, UniV3Twap, UseBit } from "@brink-sdk"
const { FLAT_PRICE_CURVE } = require('@brinkninja/config').mainnet
import { USDC_TOKEN as USDC_DETAILS, WETH_TOKEN as WETH_DETAILS } from "../helpers/tokens";
import { FeeAmount } from '@uniswap/v3-sdk';

const USDC_TOKEN = new Token({ address: USDC_DETAILS.address })
const WETH_TOKEN = new Token({ address: WETH_DETAILS.address })

describe('Segments', function () {
  let testCases: any[]
  beforeEach(async function () {
    const usdc = new Token({ address: USDC_DETAILS.address })
    const weth = new Token({ address: WETH_DETAILS.address })
    const usdcInput = BigInt(1450_000000)

    const priceOracle = new UniV3Twap({
      tokenA: usdc,
      tokenB: weth,
      interval: BigInt(1000)
    })

    // use the USDC/WETH price oracle to get the exact expected WETH output
    const priceX96 = await this.defaultSigner.call(await priceOracle.price())

    const usdc_weth_500_twap = new UniV3Twap({
      tokenA: USDC_TOKEN,
      tokenB: WETH_TOKEN,
      interval: BigInt(3600),
      fee: FeeAmount.LOW
    })

    testCases = [
      {
        args: {
          id: '123',
          initialStart: '0',
          intervalMinSize: '100',
          maxIntervals: '5',
        },
        class: BlockInterval,
        expected: {
          functionName: 'blockInterval',
          params: {
            id: '123',
            initialStart: '0',
            intervalMinSize: '100',
            maxIntervals: '5',
          },
          requiresUnsignedCall: false,
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084e640b88e000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000',
        },
      },
      {
        args: {
          priceCurve: {
            address: FLAT_PRICE_CURVE,
            params: priceX96.toString()
          },
          signer: '0x6aB740C5e1FEd0b0e4818bA0F8EAAEc8cee3BC14',
          tokenIn: new Token({ address: USDC_DETAILS.address }),
          tokenOut: new Token({ address: WETH_DETAILS.address }),
          tokenInAmount: usdcInput,
          fillStateParams: new FillStateParams({
            id: BigInt(12345),
            sign: true,
            startX96: 0
          }),
        },
        class: LimitSwapExactInput,
        expected: {
          functionName: 'limitSwapExactInput',
          params: {
            priceCurve: {
              address: '0xc509733b8dddbab9369a96f6f216d6e59db3900f',
              params: '0x'
            },
            signer: '0x6aB740C5e1FEd0b0e4818bA0F8EAAEc8cee3BC14',
            tokenIn: {
              address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
              standard: 0,
              idsMerkleRoot: '0x0000000000000000000000000000000000000000000000000000000000000000',
              id: '0',
              disallowFlagged: false
            },
            tokenOut: {
              address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
              standard: 0,
              idsMerkleRoot: '0x0000000000000000000000000000000000000000000000000000000000000000',
              id: '0',
              disallowFlagged: false
            },
            tokenInAmount: '1450000000',
            fillStateParams: { id: '12345', sign: true, startX96: '0' }
          },
          requiresUnsignedCall: true,
          data: '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000028442e8f5c80000000000000000000000006ab740c5e1fed0b0e4818ba0f8eaaec8cee3bc140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000566d3e80000000000000000000000000c509733b8dddbab9369a96f6f216d6e59db3900f000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000030390000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
        },
      },
      {
        args: {
          oracle: usdc_weth_500_twap,
          signer: '0x6399ae010188F36e469FB6E62C859dDFc558328A',
          tokenIn: USDC_TOKEN,
          tokenOut: WETH_TOKEN,
          tokenInAmount: BigInt(1000) * BigInt(10) ** BigInt(6),
          feePercent: 1000,
          feeMin: BigInt(0)
        },
        class: MarketSwapExactInput,
        expected: {
          functionName: 'marketSwapExactInput',
          params: {
            oracle: {
              address: '0xdd584de33adb0959b581a4f34403b8e67ebb97f1',
              params: '0x00000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f56400000000000000000000000000000000000000000000000000000000000000e10'
            },
            signer: '0x6399ae010188F36e469FB6E62C859dDFc558328A',
            tokenIn: {
              address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
              standard: 0,
              idsMerkleRoot: '0x0000000000000000000000000000000000000000000000000000000000000000',
              id: '0',
              disallowFlagged: false
            },
            tokenOut: {
              address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
              standard: 0,
              idsMerkleRoot: '0x0000000000000000000000000000000000000000000000000000000000000000',
              id: '0',
              disallowFlagged: false
            },
            tokenInAmount: '1000000000',
            feePercent: '1000',
            feeMin: '0'
          },
          requiresUnsignedCall: true,
          data: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002a449d9a218000000000000000000000000dd584de33adb0959b581a4f34403b8e67ebb97f100000000000000000000000000000000000000000000000000000000000002200000000000000000000000006399ae010188f36e469fb6e62c859ddfc558328a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000004000000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f56400000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
        },
      },
      {
        args: { index: 0, value: 1 },
        class: RequireBitNotUsed,
        expected: {
          functionName: 'requireBitNotUsed',
          params: { index: '0', value: '1' },
          requiresUnsignedCall: false,
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044181233ee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000'
        },
      },
      {
        args: { index: 0, value: 1 },
        class: RequireBitUsed,
        expected: {
          functionName: 'requireBitUsed',
          params: { index: '0', value: '1' },
          requiresUnsignedCall: false,
          data: '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004447244b0d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000'
        },
      },
      {
        args: { blockNumber: 1234 },
        class: RequireBlockMined,
        expected: {
          data: '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002402908ed300000000000000000000000000000000000000000000000000000000000004d200000000000000000000000000000000000000000000000000000000',
          functionName: 'requireBlockMined',
          params: {
            blockNumber: '1234'
          },
          requiresUnsignedCall: false,
        }
      },
      {
        args: { blockNumber: 1234 },
        class: RequireBlockNotMined,
        expected: {
          functionName: 'requireBlockNotMined',
          params: { blockNumber: '1234' },
          requiresUnsignedCall: false,
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024502929ff00000000000000000000000000000000000000000000000000000000000004d200000000000000000000000000000000000000000000000000000000'
        },
      },
      {
        args: {
          oracle: usdc_weth_500_twap,
          lowerBound: BigInt(1000) * BigInt(2) ** BigInt(96)
        },
        class: RequireUint256LowerBound,
        expected: {
          functionName: 'requireUint256LowerBound',
          params: {
            oracle: usdc_weth_500_twap,
            lowerBound: '79228162514264337593543950336000'
          },
          requiresUnsignedCall: false,
          data: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c42b2fc43a000000000000000000000000dd584de33adb0959b581a4f34403b8e67ebb97f1000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f56400000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000'
        },
      },
      {
        args: {
          signer: '0x6aB740C5e1FEd0b0e4818bA0F8EAAEc8cee3BC14',
          tokenIn: USDC_TOKEN,
          tokenOut: WETH_TOKEN,
          inputAmount: {
            contractAddress: '0x19baae0c65ef0bc41e0fa160babe605f2c1d7052',
            paramsBytesData: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000',
          },
          outputAmount: {
            contractAddress: '0x935be545c327602aa17f9184deab53be59440769',
            paramsBytesData: '0x0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000046c7cfe000000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000186a0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe79600000000000000000000000003b28d6ee052b65ed4d5230c1b2a9abaef031c6480000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000004000000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f564000000000000000000000000000000000000000000000000000000000000003e8',
          },
          solverValidator: '0xea8cb64b49a29db66e84a795dc46ebfa9b10b120'
        },
        class: Swap01,
        expected: {
          'functionName': 'swap01',
          'params': {
            'signer': '0x6aB740C5e1FEd0b0e4818bA0F8EAAEc8cee3BC14',
            'tokenIn': {
              'address': '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
              'standard': 0,
              'idsMerkleRoot': '0x0000000000000000000000000000000000000000000000000000000000000000',
              'id': '0',
              'disallowFlagged': false
            },
            'tokenOut': {
              'address': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
              'standard': 0,
              'idsMerkleRoot': '0x0000000000000000000000000000000000000000000000000000000000000000',
              'id': '0',
              'disallowFlagged': false
            },
            'inputAmount': {
              'contractName': 'FixedSwapAmount01',
              'contractAddress': '0x19baae0c65ef0bc41e0fa160babe605f2c1d7052',
              'paramsBytesData': '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000',
              'params': [
                '1000000000000000000'
              ],
              'paramTypes': [
                {
                  'name': 'amount',
                  'type': 'uint256'
                }
              ]
            },
            'outputAmount': {
              'contractName': 'BlockIntervalDutchAuctionAmount01',
              'contractAddress': '0x935be545c327602aa17f9184deab53be59440769',
              'paramsBytesData': '0x0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000046c7cfe000000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000186a0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe79600000000000000000000000003b28d6ee052b65ed4d5230c1b2a9abaef031c6480000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000004000000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f564000000000000000000000000000000000000000000000000000000000000003e8',
              'params': [
                '1000000000000000000',
                '12345',
                '19000000000',
                '15000',
                '1000',
                '100000',
                '-100000',
                '0x3b28d6ee052b65ed4d5230c1b2a9abaef031c648',
                '0x00000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f564000000000000000000000000000000000000000000000000000000000000003e8'
              ],
              'paramTypes': [
                {
                  'name': 'oppositeTokenAmount',
                  'type': 'uint256'
                },
                {
                  'name': 'blockIntervalId',
                  'type': 'uint64'
                },
                {
                  'name': 'firstAuctionStartBlock',
                  'type': 'uint128'
                },
                {
                  'name': 'auctionDelayBlocks',
                  'type': 'uint128'
                },
                {
                  'name': 'auctionDurationBlocks',
                  'type': 'uint128'
                },
                {
                  'name': 'startPercentE6',
                  'type': 'int24'
                },
                {
                  'name': 'endPercentE6',
                  'type': 'int24'
                },
                {
                  'name': 'priceX96Oracle',
                  'type': 'address'
                },
                {
                  'name': 'priceX96OracleParams',
                  'type': 'bytes'
                }
              ]
            },
            'solverValidator': '0xea8cb64b49a29db66e84a795dc46ebfa9b10b120'
          },
          'requiresUnsignedCall': true,
          'data': '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000424b20cd7790000000000000000000000006ab740c5e1fed0b0e4818ba0f8eaaec8cee3bc140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019baae0c65ef0bc41e0fa160babe605f2c1d7052000000000000000000000000935be545c327602aa17f9184deab53be5944076900000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000ea8cb64b49a29db66e84a795dc46ebfa9b10b120000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000046c7cfe000000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000186a0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe79600000000000000000000000003b28d6ee052b65ed4d5230c1b2a9abaef031c6480000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000004000000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f564000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
        },
      },
      {
        args: { index: BigInt(0), value: BigInt(2 ** 0) },
        class: UseBit,
        expected: {
          'functionName': 'useBit',
          'params': {
            'index': '0',
            'value': '1'
          },
          'requiresUnsignedCall': false,
          'data': '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9aa5f7e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000'
        },
      },
    ];
  })

  describe('.toJSON()', async function () {
    it('should build Segments and convert to JSON', async function () {
      for (let test of testCases) {
        const segment = new test.class(test.args)
        const segmentJson = await segment.toJSON()
        expect(segmentJson).to.eql(test.expected)
        expect(segmentJson.data).to.be.ok
      }
    })

    it('should build Segments and convert to JSON, exclude byteData', async function () {
      for (let test of testCases) {
        const segment = new test.class(test.args)
        const segmentJson = await segment.toJSON({ excludeData: true })
        delete test.expected.data;
        expect(segmentJson).to.eql(test.expected)
        expect(segmentJson.data).to.be.undefined
      }
    })
  })
})

